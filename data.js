// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let investorsData = [];
let filteredData = [];
let currentPage = 1;
const recordsPerPage = 100;

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Render API
async function loadDataFromRender() {
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Render API...');
        const response = await fetch('/api/investors');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success && result.data) {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º
            const investorsMap = new Map();
            
            result.data.forEach(row => {
                if (!investorsMap.has(row.id)) {
                    investorsMap.set(row.id, {
                        id: row.id,
                        name: row.name,
                        title: row.title,
                        company: row.company,
                        linkedin_url: row.linkedin_url,
                        email: row.email,
                        phone: row.phone,
                        location: row.location,
                        industry: row.industry,
                        investment_stage: row.investment_stage,
                        investment_size: row.investment_size,
                        portfolio_companies: row.portfolio_companies,
                        description: row.description,
                        rating: row.rating,
                        owner_progress: [],
                        notes: null
                    });
                }
                
                const investor = investorsMap.get(row.id);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞
                if (row.owner_name && row.stage) {
                    const existingProgress = investor.owner_progress.find(p => 
                        p.owner_name === row.owner_name && p.stage === row.stage
                    );
                    if (!existingProgress) {
                        investor.owner_progress.push({
                            owner_name: row.owner_name,
                            stage: row.stage,
                            is_active: row.is_active
                        });
                    }
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
                if (row.note_text && !investor.notes) {
                    investor.notes = row.note_text;
                }
            });
            
            investorsData = Array.from(investorsMap.values());
            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${investorsData.length} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ —Å Render API`);
            return investorsData;
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å Render API:', error);
        throw error;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Render API
async function saveProgressToRender(investorId, ownerName, stage, isActive) {
    try {
        const response = await fetch('/api/progress', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                investor_id: investorId,
                owner_name: ownerName,
                stage: stage,
                is_active: isActive
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        if (!result.success) {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
        }
        
        console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Render API');
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Render API:', error);
        throw error;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ Render API
async function saveNoteToRender(investorId, noteText) {
    try {
        const response = await fetch('/api/notes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                investor_id: investorId,
                note_text: noteText
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        if (!result.success) {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
        }
        
        console.log('–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Render API');
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ Render API:', error);
        throw error;
    }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ Render API
async function logActionToRender(actionType, actionData) {
    try {
        const response = await fetch('/api/logs', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action_type: actionType,
                action_data: actionData
            })
        });
        
        if (!response.ok) {
            console.warn('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', response.status);
        }
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Render API:', error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –¥–ª—è Render
function createInvestorCardRender(investor) {
    const card = document.createElement('div');
    card.className = 'investor-card';
    card.dataset.investorId = investor.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const antonProgress = investor.owner_progress?.find(p => p.owner_name === '–ê–Ω—Ç–æ–Ω' && p.is_active) || null;
    const pavelProgress = investor.owner_progress?.find(p => p.owner_name === '–ü–∞–≤–µ–ª' && p.is_active) || null;
    
    card.innerHTML = `
        <div class="investor-header">
            <div class="investor-info">
                <h3 class="investor-name">${investor.name}</h3>
                <p class="investor-title">${investor.title || ''}</p>
                <p class="investor-company">${investor.company || ''}</p>
            </div>
            <div class="investor-rating">
                <span class="rating-badge">${investor.rating || 0}</span>
            </div>
            <div class="investor-actions">
                <button class="btn btn-secondary" onclick="showDetailsModal(${investor.id})">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                ${investor.linkedin_url ? `<a href="${investor.linkedin_url}" target="_blank" class="btn btn-primary">LinkedIn</a>` : ''}
            </div>
        </div>
        <div class="investor-progress">
            <div class="owner-section">
                <div class="owner-checkbox">
                    <input type="checkbox" id="anton_${investor.id}" 
                           ${antonProgress ? 'checked' : ''} 
                           onchange="toggleOwner(${investor.id}, '–ê–Ω—Ç–æ–Ω', this.checked)">
                    <label for="anton_${investor.id}">–ê–Ω—Ç–æ–Ω</label>
                </div>
                <div class="stage-toggles">
                    ${['INV', 'ACC', 'RESP-I', 'MSG', 'RESP-M', 'INT', 'CALL', 'NEXT'].map(stage => `
                        <button class="stage-btn ${antonProgress?.stage === stage ? 'active' : 'inactive'}" 
                                onclick="setStage(${investor.id}, '–ê–Ω—Ç–æ–Ω', '${stage}')"
                                title="${getStageTitle(stage)}">${stage}</button>
                    `).join('')}
                </div>
            </div>
            <div class="owner-section">
                <div class="owner-checkbox">
                    <input type="checkbox" id="pavel_${investor.id}" 
                           ${pavelProgress ? 'checked' : ''} 
                           onchange="toggleOwner(${investor.id}, '–ü–∞–≤–µ–ª', this.checked)">
                    <label for="pavel_${investor.id}">–ü–∞–≤–µ–ª</label>
                </div>
                <div class="stage-toggles">
                    ${['INV', 'ACC', 'RESP-I', 'MSG', 'RESP-M', 'INT', 'CALL', 'NEXT'].map(stage => `
                        <button class="stage-btn ${pavelProgress?.stage === stage ? 'active' : 'inactive'}" 
                                onclick="setStage(${investor.id}, '–ü–∞–≤–µ–ª', '${stage}')"
                                title="${getStageTitle(stage)}">${stage}</button>
                    `).join('')}
                </div>
            </div>
        </div>
        <div class="investor-footer">
            <button class="btn btn-notes" onclick="showNotesModalRender(${investor.id})">
                üìù –ó–∞–º–µ—Ç–∫–∏
            </button>
        </div>
    `;

    return card;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è Render
async function showNotesModalRender(investorId) {
    const investor = investorsData.find(i => i.id === investorId);
    if (!investor) return;
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>–ó–∞–º–µ—Ç–∫–∏: ${investor.name}</h3>
                <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
            </div>
            <div class="modal-body">
                <textarea id="noteText" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É..." rows="6">${investor.notes || ''}</textarea>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" onclick="saveNoteRender(${investorId})">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button class="btn btn-secondary" onclick="this.closest('.modal').remove()">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è Render
async function saveNoteRender(investorId) {
    try {
        const noteText = document.getElementById('noteText').value;
        await saveNoteToRender(investorId, noteText);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        const investor = investorsData.find(i => i.id === investorId);
        if (investor) {
            investor.notes = noteText;
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.querySelector('.modal').remove();
        
        console.log('–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ' + error.message);
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è Render
async function toggleOwner(investorId, ownerName, isChecked) {
    try {
        const investor = investorsData.find(i => i.id === investorId);
        if (!investor) return;
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —ç—Ç–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        investor.owner_progress = investor.owner_progress.filter(p => p.owner_name !== ownerName);
        
        if (isChecked) {
            // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤–∫–ª—é—á–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
            await saveProgressToRender(investorId, ownerName, 'INV', true);
            investor.owner_progress.push({
                owner_name: ownerName,
                stage: 'INV',
                is_active: true
            });
        } else {
            // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤—ã–∫–ª—é—á–µ–Ω, –æ—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await saveProgressToRender(investorId, ownerName, null, false);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateInvestorCard(investorId);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await logActionToRender('OWNER_TOGGLE', { investorId, ownerName, isChecked });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç—Ç–∞–ø–∞ –¥–ª—è Render
async function setStage(investorId, ownerName, stage) {
    try {
        const investor = investorsData.find(i => i.id === investorId);
        if (!investor) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await saveProgressToRender(investorId, ownerName, stage, true);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        investor.owner_progress = investor.owner_progress.filter(p => p.owner_name !== ownerName);
        investor.owner_progress.push({
            owner_name: ownerName,
            stage: stage,
            is_active: true
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateInvestorCard(investorId);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await logActionToRender('STAGE_UPDATE', { investorId, ownerName, stage });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç—Ç–∞–ø–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
function updateInvestorCard(investorId) {
    const investor = investorsData.find(i => i.id === investorId);
    if (!investor) return;
    
    const existingCard = document.querySelector(`[data-investor-id="${investorId}"]`);
    if (existingCard) {
        const newCard = createInvestorCardRender(investor);
        existingCard.replaceWith(newCard);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStageTitle(stage) {
    const titles = {
        'INV': '–ò–Ω–≤–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'ACC': '–ò–Ω–≤–∞–π—Ç –ø—Ä–∏–Ω—è—Ç',
        'RESP-I': '–û—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–≤–∞–π—Ç',
        'MSG': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'RESP-M': '–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'INT': '–ü—Ä–æ—è–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å',
        'CALL': '–ù–∞–∑–Ω–∞—á–µ–Ω —Å–æ–∑–≤–æ–Ω',
        'NEXT': '–ï—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã, –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏'
    };
    return titles[stage] || stage;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.loadDataFromRender = loadDataFromRender;
window.saveProgressToRender = saveProgressToRender;
window.saveNoteToRender = saveNoteToRender;
window.logActionToRender = logActionToRender;
window.createInvestorCardRender = createInvestorCardRender;
window.showNotesModalRender = showNotesModalRender;
window.saveNoteRender = saveNoteRender;
window.toggleOwner = toggleOwner;
window.setStage = setStage;
window.updateInvestorCard = updateInvestorCard;