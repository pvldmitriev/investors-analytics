const express = require('express');
const { Pool } = require('pg');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// Middleware
app.use(express.json());
app.use(express.static('.'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
    try {
        const client = await pool.connect();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        const createTablesSQL = `
            -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
            CREATE TABLE IF NOT EXISTS investors (
                id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                title TEXT,
                company TEXT,
                linkedin_url TEXT,
                email TEXT,
                phone TEXT,
                location TEXT,
                industry TEXT,
                investment_stage TEXT,
                investment_size TEXT,
                portfolio_companies JSONB,
                description TEXT,
                rating INTEGER DEFAULT 0,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            );
            
            -- –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ name, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            CREATE UNIQUE INDEX IF NOT EXISTS idx_investors_name_unique ON investors(name);

            -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
            CREATE TABLE IF NOT EXISTS owner_progress (
                id SERIAL PRIMARY KEY,
                investor_id INTEGER REFERENCES investors(id) ON DELETE CASCADE,
                owner_name TEXT NOT NULL CHECK (owner_name IN ('–ê–Ω—Ç–æ–Ω', '–ü–∞–≤–µ–ª')),
                stage TEXT NOT NULL CHECK (stage IN ('INV', 'ACC', 'RESP-I', 'MSG', 'RESP-M', 'INT', 'CALL', 'NEXT')),
                is_active BOOLEAN DEFAULT false,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                UNIQUE(investor_id, owner_name, stage)
            );

            -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–º–µ—Ç–æ–∫
            CREATE TABLE IF NOT EXISTS notes (
                id SERIAL PRIMARY KEY,
                investor_id INTEGER REFERENCES investors(id) ON DELETE CASCADE,
                note_text TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            );

            -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤
            CREATE TABLE IF NOT EXISTS logs (
                id SERIAL PRIMARY KEY,
                action_type TEXT NOT NULL,
                action_data JSONB,
                user_agent TEXT,
                ip_address TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            );

            -- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
            CREATE INDEX IF NOT EXISTS idx_investors_name ON investors(name);
            CREATE INDEX IF NOT EXISTS idx_investors_company ON investors(company);
            CREATE INDEX IF NOT EXISTS idx_owner_progress_investor ON owner_progress(investor_id);
            CREATE INDEX IF NOT EXISTS idx_owner_progress_owner ON owner_progress(owner_name);
            CREATE INDEX IF NOT EXISTS idx_notes_investor ON notes(investor_id);
            CREATE INDEX IF NOT EXISTS idx_logs_created_at ON logs(created_at);
        `;

        await client.query(createTablesSQL);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ investors
        const { rows } = await client.query('SELECT COUNT(*) FROM investors');
        console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${rows[0].count}`);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤...');
        await loadInvestorData(client);

        client.release();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
async function loadInvestorData(client) {
    try {
        const dataPath = path.join(__dirname, 'results', 'evaluated_profiles.ru_kz_by_full.json');
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: ${dataPath}`);
        
        if (!fs.existsSync(dataPath)) {
            console.log('‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
            return;
        }

        const rawData = fs.readFileSync(dataPath, 'utf8');
        const investors = JSON.parse(rawData);

        console.log(`üìà –ù–∞–π–¥–µ–Ω–æ ${investors.length} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ`);

        let insertedCount = 0;
        let skippedCount = 0;

        for (let i = 0; i < investors.length; i++) {
            const investor = investors[i];
            try {
                const name = `${investor['First Name'] || ''} ${investor['Last Name'] || ''}`.trim();
                const title = investor['Current Title'] || '';
                const company = investor['Current Company'] || '';
                const linkedin_url = investor['LinkedIn URL'] || '';
                const description = investor['Quotes'] || '';
                const rating = investor['investor_score'] || 0;

                const query = `
                    INSERT INTO investors (name, title, company, linkedin_url, description, rating)
                    VALUES ($1, $2, $3, $4, $5, $6)
                    ON CONFLICT (name) DO NOTHING
                `;
                
                const result = await client.query(query, [name, title, company, linkedin_url, description, rating]);
                
                if (result.rowCount > 0) {
                    insertedCount++;
                } else {
                    skippedCount++;
                }

                // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
                if ((i + 1) % 100 === 0) {
                    console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${investors.length} (${insertedCount} –¥–æ–±–∞–≤–ª–µ–Ω–æ, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ)`);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ ${i + 1}:`, error);
            }
        }

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${insertedCount} –¥–æ–±–∞–≤–ª–µ–Ω–æ, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const { rows } = await client.query('SELECT COUNT(*) FROM investors');
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${rows[0].count}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
}

// API Routes
app.get('/api/investors', async (req, res) => {
    try {
        const client = await pool.connect();
        const result = await client.query(`
            SELECT i.*, 
                   op.owner_name, op.stage, op.is_active,
                   n.note_text
            FROM investors i
            LEFT JOIN owner_progress op ON i.id = op.investor_id
            LEFT JOIN notes n ON i.id = n.investor_id
            ORDER BY i.name
        `);
        client.release();
        res.json({ success: true, data: result.rows });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/progress', async (req, res) => {
    try {
        const { investor_id, owner_name, stage, is_active } = req.body;
        const client = await pool.connect();
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        await client.query('DELETE FROM owner_progress WHERE investor_id = $1 AND owner_name = $2', [investor_id, owner_name]);
        
        if (is_active && stage) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            await client.query(
                'INSERT INTO owner_progress (investor_id, owner_name, stage, is_active) VALUES ($1, $2, $3, $4)',
                [investor_id, owner_name, stage, true]
            );
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await client.query(
                'INSERT INTO logs (action_type, action_data) VALUES ($1, $2)',
                ['PROGRESS_UPDATE', JSON.stringify({ investor_id, owner_name, stage, is_active })]
            );
        }
        
        client.release();
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/notes', async (req, res) => {
    try {
        const { investor_id, note_text } = req.body;
        const client = await pool.connect();
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
        await client.query('DELETE FROM notes WHERE investor_id = $1', [investor_id]);
        
        if (note_text && note_text.trim()) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
            await client.query(
                'INSERT INTO notes (investor_id, note_text) VALUES ($1, $2)',
                [investor_id, note_text.trim()]
            );
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await client.query(
                'INSERT INTO logs (action_type, action_data) VALUES ($1, $2)',
                ['NOTE_UPDATE', JSON.stringify({ investor_id, note_text: note_text.trim() })]
            );
        }
        
        client.release();
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

app.get('/api/logs', async (req, res) => {
    try {
        const { action_type, limit = 100, offset = 0 } = req.query;
        const client = await pool.connect();
        
        let query = 'SELECT * FROM logs ORDER BY created_at DESC LIMIT $1 OFFSET $2';
        let params = [parseInt(limit), parseInt(offset)];
        
        if (action_type) {
            query = 'SELECT * FROM logs WHERE action_type = $3 ORDER BY created_at DESC LIMIT $1 OFFSET $2';
            params = [parseInt(limit), parseInt(offset), action_type];
        }
        
        const result = await client.query(query, params);
        client.release();
        res.json({ success: true, data: result.rows });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// API endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
app.post('/api/load-data', async (req, res) => {
    try {
        const client = await pool.connect();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        const { rows } = await client.query('SELECT COUNT(*) FROM investors');
        console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${rows[0].count}`);
        
        if (parseInt(rows[0].count) > 0) {
            client.release();
            return res.status(200).json({ success: true, message: '–î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', count: rows[0].count });
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        const dataPath = path.join(__dirname, 'results', 'evaluated_profiles.ru_kz_by_full.json');
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: ${dataPath}`);
        
        if (!fs.existsSync(dataPath)) {
            client.release();
            return res.status(404).json({ success: false, error: '–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const rawData = fs.readFileSync(dataPath, 'utf8');
        const investors = JSON.parse(rawData);
        console.log(`üìà –ù–∞–π–¥–µ–Ω–æ ${investors.length} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ`);

        let insertedCount = 0;
        let skippedCount = 0;

        for (let i = 0; i < investors.length; i++) {
            const investor = investors[i];
            try {
                const name = `${investor['First Name'] || ''} ${investor['Last Name'] || ''}`.trim();
                const title = investor['Current Title'] || '';
                const company = investor['Current Company'] || '';
                const linkedin_url = investor['LinkedIn URL'] || '';
                const description = investor['Quotes'] || '';
                const rating = investor['investor_score'] || 0;

                const query = `
                    INSERT INTO investors (name, title, company, linkedin_url, description, rating)
                    VALUES ($1, $2, $3, $4, $5, $6)
                    ON CONFLICT (name) DO NOTHING
                `;
                
                const result = await client.query(query, [name, title, company, linkedin_url, description, rating]);
                
                if (result.rowCount > 0) {
                    insertedCount++;
                } else {
                    skippedCount++;
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ ${i + 1}:`, error);
            }
        }

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${insertedCount} –¥–æ–±–∞–≤–ª–µ–Ω–æ, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const { rows: finalRows } = await client.query('SELECT COUNT(*) FROM investors');
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${finalRows[0].count}`);
        
        client.release();
        res.status(200).json({ 
            success: true, 
            message: '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
            inserted: insertedCount,
            skipped: skippedCount,
            total: finalRows[0].count
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
app.get('/api/debug', async (req, res) => {
    try {
        const dataPath = path.join(__dirname, 'results', 'evaluated_profiles.ru_kz_by_full.json');
        const fileExists = fs.existsSync(dataPath);
        const fileSize = fileExists ? fs.statSync(dataPath).size : 0;
        
        const client = await pool.connect();
        const { rows } = await client.query('SELECT COUNT(*) FROM investors');
        client.release();
        
        res.json({
            success: true,
            debug: {
                fileExists,
                filePath: dataPath,
                fileSize,
                currentDir: __dirname,
                filesInResults: fs.readdirSync(path.join(__dirname, 'results')),
                investorsCount: parseInt(rows[0].count)
            }
        });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    await initDatabase();
});

module.exports = app;
